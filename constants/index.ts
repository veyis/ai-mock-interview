import { CreateAssistantDTO } from "@vapi-ai/web/dist/api";
import { z } from "zod";

export const mappings = {
  "react.js": "react",
  reactjs: "react",
  react: "react",
  "next.js": "nextjs",
  nextjs: "nextjs",
  next: "nextjs",
  "vue.js": "vuejs",
  vuejs: "vuejs",
  vue: "vuejs",
  "express.js": "express",
  expressjs: "express",
  express: "express",
  "node.js": "nodejs",
  nodejs: "nodejs",
  node: "nodejs",
  mongodb: "mongodb",
  mongo: "mongodb",
  mongoose: "mongoose",
  mysql: "mysql",
  postgresql: "postgresql",
  sqlite: "sqlite",
  firebase: "firebase",
  docker: "docker",
  kubernetes: "kubernetes",
  aws: "aws",
  azure: "azure",
  gcp: "gcp",
  digitalocean: "digitalocean",
  heroku: "heroku",
  photoshop: "photoshop",
  "adobe photoshop": "photoshop",
  html5: "html5",
  html: "html5",
  css3: "css3",
  css: "css3",
  sass: "sass",
  scss: "sass",
  less: "less",
  tailwindcss: "tailwindcss",
  tailwind: "tailwindcss",
  bootstrap: "bootstrap",
  jquery: "jquery",
  typescript: "typescript",
  ts: "typescript",
  javascript: "javascript",
  js: "javascript",
  "angular.js": "angular",
  angularjs: "angular",
  angular: "angular",
  "ember.js": "ember",
  emberjs: "ember",
  ember: "ember",
  "backbone.js": "backbone",
  backbonejs: "backbone",
  backbone: "backbone",
  nestjs: "nestjs",
  graphql: "graphql",
  "graph ql": "graphql",
  apollo: "apollo",
  webpack: "webpack",
  babel: "babel",
  "rollup.js": "rollup",
  rollupjs: "rollup",
  rollup: "rollup",
  "parcel.js": "parcel",
  parceljs: "parcel",
  npm: "npm",
  yarn: "yarn",
  git: "git",
  github: "github",
  gitlab: "gitlab",
  bitbucket: "bitbucket",
  figma: "figma",
  prisma: "prisma",
  redux: "redux",
  flux: "flux",
  redis: "redis",
  selenium: "selenium",
  cypress: "cypress",
  jest: "jest",
  mocha: "mocha",
  chai: "chai",
  karma: "karma",
  vuex: "vuex",
  "nuxt.js": "nuxt",
  nuxtjs: "nuxt",
  nuxt: "nuxt",
  strapi: "strapi",
  wordpress: "wordpress",
  contentful: "contentful",
  netlify: "netlify",
  vercel: "vercel",
  "aws amplify": "amplify",
  "frontend-developer": {
    role: "Frontend Developer",
    type: "frontend",
    techstack: ["React", "TypeScript", "Next.js", "Tailwind CSS"],
  },
  "backend-developer": {
    role: "Backend Developer",
    type: "backend",
    techstack: ["Node.js", "Express", "MongoDB", "REST APIs"],
  },
  "fullstack-developer": {
    role: "Full Stack Developer",
    type: "fullstack",
    techstack: ["React", "Node.js", "MongoDB", "Express"],
  },
  "software-engineer": {
    role: "Software Engineer",
    type: "general",
    techstack: ["JavaScript", "Python", "SQL", "Git"],
  },
  "data-scientist": {
    role: "Data Scientist",
    type: "data",
    techstack: ["Python", "Pandas", "Scikit-learn", "TensorFlow"],
  },
  "product-manager": {
    role: "Product Manager",
    type: "product",
    techstack: ["Agile", "JIRA", "Product Strategy", "User Research"],
  },
  "ux-designer": {
    role: "UX Designer",
    type: "design",
    techstack: ["Figma", "User Research", "Prototyping", "Design Systems"],
  },
  "devops-engineer": {
    role: "DevOps Engineer",
    type: "devops",
    techstack: ["Docker", "Kubernetes", "AWS", "CI/CD"],
  },
  "mobile-developer": {
    role: "Mobile Developer",
    type: "mobile",
    techstack: ["React Native", "iOS", "Android", "Flutter"],
  },
  "qa-engineer": {
    role: "QA Engineer",
    type: "qa",
    techstack: ["Testing", "Automation", "Selenium", "Jest"],
  },
};

export const interviewer: CreateAssistantDTO = {
  name: "Interviewer",
  firstMessage:
    "Hello! I'm your technical interviewer today. I'll be asking you questions about your experience and technical knowledge.",
  model: {
    provider: "openai",
    model: "gpt-4-turbo-preview",
    temperature: 0.7,
  },
  voice: {
    provider: "11labs",
    voiceId: "sarah",
  },
};

export const interviewSchema = z.object({
  id: z.string().optional(),
  role: z.string(),
  type: z.string(),
  techstack: z.array(z.string()),
  userId: z.string(),
  level: z.string().optional(),
  questions: z.array(z.string()).optional(),
  finalized: z.boolean().optional(),
  createdAt: z.date().optional(),
});

export type Interview = z.infer<typeof interviewSchema>;

export const feedbackSchema = z.object({
  totalScore: z.number(),
  categoryScores: z.tuple([
    z.object({
      name: z.literal("Communication Skills"),
      score: z.number(),
      comment: z.string(),
    }),
    z.object({
      name: z.literal("Technical Knowledge"),
      score: z.number(),
      comment: z.string(),
    }),
    z.object({
      name: z.literal("Problem Solving"),
      score: z.number(),
      comment: z.string(),
    }),
    z.object({
      name: z.literal("Cultural Fit"),
      score: z.number(),
      comment: z.string(),
    }),
    z.object({
      name: z.literal("Confidence and Clarity"),
      score: z.number(),
      comment: z.string(),
    }),
  ]),
  strengths: z.array(z.string()),
  areasForImprovement: z.array(z.string()),
  finalAssessment: z.string(),
});

export type Feedback = z.infer<typeof feedbackSchema>;

export const interviewCovers = [
  "/adobe.png",
  "/amazon.png",
  "/facebook.png",
  "/hostinger.png",
  "/pinterest.png",
  "/quora.png",
  "/reddit.png",
  "/skype.png",
  "/spotify.png",
  "/telegram.png",
  "/tiktok.png",
  "/yahoo.png",
];

export const dummyInterviews: Interview[] = [
  {
    id: "1",
    userId: "user1",
    role: "Frontend Developer",
    type: "Technical",
    techstack: ["React", "TypeScript", "Next.js", "Tailwind CSS"],
    level: "Junior",
    questions: ["What is React?"],
    finalized: false,
    createdAt: new Date("2024-03-15T10:00:00Z"),
  },
  {
    id: "2",
    userId: "user1",
    role: "Full Stack Developer",
    type: "Mixed",
    techstack: ["Node.js", "Express", "MongoDB", "React"],
    level: "Senior",
    questions: ["What is Node.js?"],
    finalized: false,
    createdAt: new Date("2024-03-14T15:30:00Z"),
  },
];
